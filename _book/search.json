[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pip Technical Guidelines",
    "section": "",
    "text": "Preface\nThis is a Quarto book. In this book we intend to write technical information about PIP projects.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "code_coverage.html",
    "href": "code_coverage.html",
    "title": "2  Add code coverage badge to your GitHub Repository.",
    "section": "",
    "text": "2.1 Codecov.io\nIn this article we will learn how to add code coverage badge to your GitHub repository.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Add code coverage badge to your GitHub Repository.</span>"
    ]
  },
  {
    "objectID": "github_actions.html",
    "href": "github_actions.html",
    "title": "3  Setting up Github Actions for Auto Deployment of Quarto book",
    "section": "",
    "text": "3.1 Introduction\nOne of the best parts of using Quarto for websites, blogs, or reports is how easily it integrates with GitHub Pages. With a simple GitHub Actions workflow, you can automatically render and publish your site every time you update your repository. In this post we are going to learn how we have enabled auto deployment for this quarto book.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting up Github Actions for Auto Deployment of Quarto book</span>"
    ]
  },
  {
    "objectID": "github_actions.html#workflow",
    "href": "github_actions.html#workflow",
    "title": "3  Setting up Github Actions for Auto Deployment of Quarto book",
    "section": "3.2 Workflow",
    "text": "3.2 Workflow\nThis is the workflow that we are using in Github Actions . Let’s look at it one by one.\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tinytex: true\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n3.2.1 Triggering the Workflow\non:\n  workflow_dispatch:\n  push:\n    branches: main\nThis tells GitHub Actions when to run the workflow. There are two triggers here:\n\npush to main – Any time you commit or merge changes into the main branch, the workflow runs\nworkflow_dispatch – Allows you to manually trigger the workflow from the GitHub Actions tab in your repository. This is useful when you want to force a rebuild and republish without committing new changes.\n\n\n\n3.2.2 Naming the workflow\nname: Quarto Publish\nThis gives the workflow a friendly name that will appear in the Actions tab.\n\n\n3.2.3 Defining the job\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\nHere we’re defining a single job called build-deploy.\n\nruns-on: ubuntu-latest – The job will run inside an Ubuntu-based virtual machine provided by GitHub.\npermissions: contents: write – The workflow needs permission to write to the repository (required for publishing to the gh-pages branch).\n\n\n\n3.2.4 The Steps\n\n3.2.4.1 1. Check out the repository\n- name: Check out repository\n  uses: actions/checkout@v4\nThis makes your repository’s files available in the workflow environment so Quarto can render your project.\n\n\n3.2.4.2 2. Set up Quarto\n- name: Set up Quarto\n  uses: quarto-dev/quarto-actions/setup@v2\n  env:\n    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  with:\n    tinytex: true\nThis installs Quarto in the workflow environment. The tinytex: true option ensures LaTeX support is available for rendering PDFs. The GH_TOKEN is github token repository secret that is added in Repo settings -&gt; Secrets and Variables -&gt; Actions . It is used for authentication when publishing.\n\n\n3.2.4.3 3. Render and Publish\n- name: Render and Publish\n  uses: quarto-dev/quarto-actions/publish@v2\n  with:\n    target: gh-pages\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\nThis step does two things:\n\nRenders your Quarto project (turns .qmd files into HTML, PDF, or other output formats).\nPublishes the output to the gh-pages branch, which GitHub Pages uses to serve your site. The target: gh-pages option ensures everything is pushed to the right branch.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting up Github Actions for Auto Deployment of Quarto book</span>"
    ]
  },
  {
    "objectID": "github_actions.html#conclusion",
    "href": "github_actions.html#conclusion",
    "title": "3  Setting up Github Actions for Auto Deployment of Quarto book",
    "section": "3.3 Conclusion :",
    "text": "3.3 Conclusion :\nWith this workflow in place, the Quarto book will automatically rebuild and deploy whenever a push is made to the main branch—or whenever we manually trigger the workflow. No more running commands locally or remembering to push generated files.\nThis is a clean, reproducible, and automated way to publish your Quarto projects using GitHub Pages.\nFor reference the Quarto book is published here.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting up Github Actions for Auto Deployment of Quarto book</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "The purpose of this book is to gather all the technical knowledge specific to PIP in one place.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code_coverage.html#codecov.io",
    "href": "code_coverage.html#codecov.io",
    "title": "2  Add code coverage badge to your GitHub Repository.",
    "section": "",
    "text": "Create an account at https://about.codecov.io/ , sign up with your GitHub account if you don’t have an account already. Codecov is a popular tool for measuring and visualizing code coverage in software projects. It integrates with GitHub, GitLab, Bitbucket, and other CI/CD systems to provide insights into how much of your code is tested by your test suite.\nYou can sync your private Github repositories on codecov platform to get started. If you want to add code coverage badge to a repository which is part of an organization (like PIP-Technical-Team, GPID-WB etc) then you need to be an admin of that organization. Admin role is needed because to sync the communication between Codecov.io with GitHub we need to generate a token which can only be done by admins.\nOnce your repo is synced with codecov and you can see it there click on Configure to start the process. As an example it should give you this screen\n\n\n\nIf you scroll below it will ask you to generate a repository secret, click on that to get a unique token for your repository and copy it.\nYou can ignore rest of the steps mentioned on that page since those are very generic language agnostic steps and since we want to setup this for R packages, we have a better option which I will share below.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Add code coverage badge to your GitHub Repository.</span>"
    ]
  },
  {
    "objectID": "code_coverage.html#github",
    "href": "code_coverage.html#github",
    "title": "2  Add code coverage badge to your GitHub Repository.",
    "section": "2.2 GitHub",
    "text": "2.2 GitHub\n\nNow, moving to GitHub go to your repository. Click on Settings -&gt; Secrets and Variables -&gt; Actions -&gt; Repository Secrets add the new token with name CODECOV_TOKEN and copy the token value which was generated in the previous step.\n\nNext, we are going to setup GitHub Action to run and calculate code coverage after every push. The calculated coverage report would be uploaded on codecov.io and would be visible on their dashboard.\nAdditionally, I also added a possibility to run R CMD CHECK after every push. R CMD check is a tool that runs a series of automated checks on an R package to ensure it’s correctly structured, documented, and error-free. It helps catch issues in code, tests, and documentation before sharing or submitting to CRAN. So it is like an additional validation that we have on our code.\nThe new workflow file looks like below\nname: R-CMD-check and Codecov\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  R-CMD-check:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up R\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Set up pandoc\n        uses: r-lib/actions/setup-pandoc@v2\n\n      - name: Install dependencies\n        run: |\n          install.packages(c(\"remotes\", \"rcmdcheck\", \"covr\"))\n          remotes::install_deps(dependencies = TRUE)\n        shell: Rscript {0}\n\n      - name: Run R CMD check\n        run: |\n          rcmdcheck::rcmdcheck(args = \"--no-manual\", error_on = \"warning\")\n        shell: Rscript {0}\n\n      - name: Run test coverage\n        run: |\n          covr::codecov()\n        shell: Rscript {0}\n        env:\n          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }} \nThis file is self explanatory but briefly, it checks out the repository that we want to run our action on, sets up R to run R CMD CHECK and finally generate code coverage report and upload it to codecov.io .\nOne tip that I can share is to check if this workflow file works on your local branch before running on master branch. To do that you should temporarily enable the workflow file to run on your local branch. This can be done as below -\non:\n  push:\n    branches: [master, your-branch]\nwhere your-branch is the name of the local branch that you want to run the workflow for. Once you have verified that everything works as expected in the local branch, you can remove your-branch from the list again.\nOnce the workflow runs successfully the dashboard on codecov.io should be updated and you should see something like this\n\nEvery time a push or PR is made to master the dashboard will be updated with latest data.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Add code coverage badge to your GitHub Repository.</span>"
    ]
  }
]